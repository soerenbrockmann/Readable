// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ShowPost /> renders properly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ShowPost
    item={
        Object {
            "author": "",
            "body": "",
            "category": "",
            "timestamp": 1468166872634,
            "title": "",
            "voteScore": 0,
          }
    }
    onDelete={[Function]}
    onDownVote={[Function]}
    onEdit={[Function]}
    onUpVote={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div>
        <div
                className="showpostheader"
        >
                <div
                        className="title"
                />
                <div>
                        <Link
                                className="ondelete"
                                onClick={[Function]}
                                replace={false}
                                to="/"
                        >
                                Delete
                        </Link>
                </div>
                <div
                        className="onedit"
                        onClick={[Function]}
                >
                        Edit
                </div>
                <div>
                        <Link
                                className="onclose"
                                replace={false}
                                to="/"
                        >
                                Close
                        </Link>
                </div>
        </div>
        <div
                className="meta"
        >
                <div>
                        
                         - 
                </div>
                 
                <FormatDate
                        timestamp={1468166872634}
                />
        </div>
        <div
                className="body"
        />
        <div
                className="showpostnav"
        >
                <div>
                        <Votes
                                onDownVote={[Function]}
                                onUpVote={[Function]}
                                voteScore={0}
                        />
                </div>
                <div
                        className="category"
                >
                        [
                        
                        ]
                </div>
        </div>
</div>,
      "className": "showpost",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="showpostheader"
>
            <div
                        className="title"
            />
            <div>
                        <Link
                                    className="ondelete"
                                    onClick={[Function]}
                                    replace={false}
                                    to="/"
                        >
                                    Delete
                        </Link>
            </div>
            <div
                        className="onedit"
                        onClick={[Function]}
            >
                        Edit
            </div>
            <div>
                        <Link
                                    className="onclose"
                                    replace={false}
                                    to="/"
                        >
                                    Close
                        </Link>
            </div>
</div>,
          <div
            className="meta"
>
            <div>
                        
                         - 
            </div>
             
            <FormatDate
                        timestamp={1468166872634}
            />
</div>,
          <div
            className="body"
/>,
          <div
            className="showpostnav"
>
            <div>
                        <Votes
                                    onDownVote={[Function]}
                                    onUpVote={[Function]}
                                    voteScore={0}
                        />
            </div>
            <div
                        className="category"
            >
                        [
                        
                        ]
            </div>
</div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="title"
/>,
              <div>
                <Link
                                className="ondelete"
                                onClick={[Function]}
                                replace={false}
                                to="/"
                >
                                Delete
                </Link>
</div>,
              <div
                className="onedit"
                onClick={[Function]}
>
                Edit
</div>,
              <div>
                <Link
                                className="onclose"
                                replace={false}
                                to="/"
                >
                                Close
                </Link>
</div>,
            ],
            "className": "showpostheader",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "className": "title",
              },
              "ref": null,
              "rendered": "",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  className="ondelete"
                  onClick={[Function]}
                  replace={false}
                  to="/"
>
                  Delete
</Link>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Delete",
                  "className": "ondelete",
                  "onClick": [Function],
                  "replace": false,
                  "to": "/",
                },
                "ref": null,
                "rendered": "Delete",
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Edit",
                "className": "onedit",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Edit",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Link
                  className="onclose"
                  replace={false}
                  to="/"
>
                  Close
</Link>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Close",
                  "className": "onclose",
                  "replace": false,
                  "to": "/",
                },
                "ref": null,
                "rendered": "Close",
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                
                 - 
</div>,
              " ",
              <FormatDate
                timestamp={1468166872634}
/>,
            ],
            "className": "meta",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "",
                  " - ",
                ],
              },
              "ref": null,
              "rendered": Array [
                "",
                " - ",
              ],
              "type": "div",
            },
            " ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "timestamp": 1468166872634,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "",
            "className": "body",
          },
          "ref": null,
          "rendered": "",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                <Votes
                                onDownVote={[Function]}
                                onUpVote={[Function]}
                                voteScore={0}
                />
</div>,
              <div
                className="category"
>
                [
                
                ]
</div>,
            ],
            "className": "showpostnav",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Votes
                  onDownVote={[Function]}
                  onUpVote={[Function]}
                  voteScore={0}
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "onDownVote": [Function],
                  "onUpVote": [Function],
                  "voteScore": 0,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "[",
                  "",
                  "]",
                ],
                "className": "category",
              },
              "ref": null,
              "rendered": Array [
                "[",
                "",
                "]",
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div>
          <div
                    className="showpostheader"
          >
                    <div
                              className="title"
                    />
                    <div>
                              <Link
                                        className="ondelete"
                                        onClick={[Function]}
                                        replace={false}
                                        to="/"
                              >
                                        Delete
                              </Link>
                    </div>
                    <div
                              className="onedit"
                              onClick={[Function]}
                    >
                              Edit
                    </div>
                    <div>
                              <Link
                                        className="onclose"
                                        replace={false}
                                        to="/"
                              >
                                        Close
                              </Link>
                    </div>
          </div>
          <div
                    className="meta"
          >
                    <div>
                              
                               - 
                    </div>
                     
                    <FormatDate
                              timestamp={1468166872634}
                    />
          </div>
          <div
                    className="body"
          />
          <div
                    className="showpostnav"
          >
                    <div>
                              <Votes
                                        onDownVote={[Function]}
                                        onUpVote={[Function]}
                                        voteScore={0}
                              />
                    </div>
                    <div
                              className="category"
                    >
                              [
                              
                              ]
                    </div>
          </div>
</div>,
        "className": "showpost",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="showpostheader"
>
              <div
                            className="title"
              />
              <div>
                            <Link
                                          className="ondelete"
                                          onClick={[Function]}
                                          replace={false}
                                          to="/"
                            >
                                          Delete
                            </Link>
              </div>
              <div
                            className="onedit"
                            onClick={[Function]}
              >
                            Edit
              </div>
              <div>
                            <Link
                                          className="onclose"
                                          replace={false}
                                          to="/"
                            >
                                          Close
                            </Link>
              </div>
</div>,
            <div
              className="meta"
>
              <div>
                            
                             - 
              </div>
               
              <FormatDate
                            timestamp={1468166872634}
              />
</div>,
            <div
              className="body"
/>,
            <div
              className="showpostnav"
>
              <div>
                            <Votes
                                          onDownVote={[Function]}
                                          onUpVote={[Function]}
                                          voteScore={0}
                            />
              </div>
              <div
                            className="category"
              >
                            [
                            
                            ]
              </div>
</div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="title"
/>,
                <div>
                  <Link
                                    className="ondelete"
                                    onClick={[Function]}
                                    replace={false}
                                    to="/"
                  >
                                    Delete
                  </Link>
</div>,
                <div
                  className="onedit"
                  onClick={[Function]}
>
                  Edit
</div>,
                <div>
                  <Link
                                    className="onclose"
                                    replace={false}
                                    to="/"
                  >
                                    Close
                  </Link>
</div>,
              ],
              "className": "showpostheader",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                  "className": "title",
                },
                "ref": null,
                "rendered": "",
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Link
                    className="ondelete"
                    onClick={[Function]}
                    replace={false}
                    to="/"
>
                    Delete
</Link>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Delete",
                    "className": "ondelete",
                    "onClick": [Function],
                    "replace": false,
                    "to": "/",
                  },
                  "ref": null,
                  "rendered": "Delete",
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Edit",
                  "className": "onedit",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "Edit",
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Link
                    className="onclose"
                    replace={false}
                    to="/"
>
                    Close
</Link>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Close",
                    "className": "onclose",
                    "replace": false,
                    "to": "/",
                  },
                  "ref": null,
                  "rendered": "Close",
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div>
                  
                   - 
</div>,
                " ",
                <FormatDate
                  timestamp={1468166872634}
/>,
              ],
              "className": "meta",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "",
                    " - ",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "",
                  " - ",
                ],
                "type": "div",
              },
              " ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "timestamp": 1468166872634,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "",
              "className": "body",
            },
            "ref": null,
            "rendered": "",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div>
                  <Votes
                                    onDownVote={[Function]}
                                    onUpVote={[Function]}
                                    voteScore={0}
                  />
</div>,
                <div
                  className="category"
>
                  [
                  
                  ]
</div>,
              ],
              "className": "showpostnav",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Votes
                    onDownVote={[Function]}
                    onUpVote={[Function]}
                    voteScore={0}
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "onDownVote": [Function],
                    "onUpVote": [Function],
                    "voteScore": 0,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "[",
                    "",
                    "]",
                  ],
                  "className": "category",
                },
                "ref": null,
                "rendered": Array [
                  "[",
                  "",
                  "]",
                ],
                "type": "div",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
